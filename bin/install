#!/usr/bin/env bash

# constants
readonly USERNAME="iamnewton"
readonly GITHUB_URL="github.com"
readonly GITHUB_REPO="dotfiles"
readonly GITHUB_USER="$USERNAME"
readonly OP_DOMAIN="$USERNAME"
LOG="/tmp/$GITHUB_REPO.log"

# variables
DIR="$HOME/.$GITHUB_REPO"
GIT_AUTHOR_NAME=""
GIT_AUTHOR_EMAIL=""

# Success logging
_success() {
	local message=$1

	echo "$(date) SUCCESS: $message" >> "$LOG"
	printf "%s✓ Success:%s\\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}

# Warning logging
_warning() {
	local message=$1

	echo "$(date) WARNING: $message" >> "$LOG"
	printf "%s ⚠Warning:%s!\\n" "$(tput setaf 3)" "$(tput sgr0) $message"
}

# Error logging
_error() {
	local message=$1

	echo "$(date) ERROR: $message" >> "$LOG"
	printf "%s⊘ Error:%s %s. Aborting!\\n" "$(tput setaf 1)" "$(tput sgr0)" "$message"
}

# Command/Processing logging
_process() {
	local message=$1

	echo "$(date) PROCESSING: $message" >> "$LOG"
	printf "%s┃%s %s...\\n" "$(tput setaf 6)" "$(tput sgr0)$(tput setaf 7)" "$message$(tput sgr0)"
}

# Question logging
_question() {
	local message=$1

	echo "$(date) QUESTION:  $message" >> "$LOG"
	printf "\\n%s===> %s?%s " "$(tput setaf 3)" "$message" "$(tput sgr0)"
}

# Check for environment variable for directory, otherwise set to default
if [[ -n $DOTFILES_DIRECTORY ]]; then
	DIR="$DOTFILES_DIRECTORY"
fi

# Check for Homebrew; install brew
if ! type -P 'brew' &> /dev/null; then
	_process "Installing Homebrew"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

	# If we're on Linux, insert brew into the path temporarily to be able to use later
	if [[ "$OSTYPE" == "linux-gnu"*  ]]; then
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
	fi

	[[ $? ]] && _success "Homebrew installed"
fi

# If missing, download and extract the dotfiles repository
if [[ -d "$DIR" ]]; then
	_process "$GITHUB_REPO already installed.  Upgrading $GITHUB_REPO"
	dotfiles
else
	_warning "No $DIR found"

	_process "Creating directory at $DIR and setting permissions"
	mkdir -p "$DIR"

	_process "Downloading repository to /tmp directory"
	# (-#) shows the progress bar as # sign
	# (-f) fail silently
	# (-L) follow the headers
	# (-o) output to a file
	curl -#fLo /tmp/dotfiles.tar.gz "https://$GITHUB_URL/$GITHUB_USER/$GITHUB_REPO/tarball/main"

	_process "Extracting files to $DIR"
	tar -zxf "/tmp/$GITHUB_REPO.tar.gz" --strip-components 1 -C "$DIR"

	_process "Removing tarball from /tmp directory"
	rm -rf "/tmp/$GITHUB_REPO.tar.gz"

	[[ $? ]] && _success "$DIR created, repository downloaded and extracted"
fi

# Change to the dotfiles directory
cd "$DIR" || exit

# Initialize the git repository if it's missing
_process "Initializing git repository"
git init

_process "Adding https://$GITHUB_URL/$GITHUB_USER/$GITHUB_REPO.git as origin"
git remote add origin "https://$GITHUB_URL/$GITHUB_USER/$GITHUB_REPO.git"

_process "Downloading changes from origin"
git fetch origin main

# Reset the index and working tree to the fetched HEAD
# (submodules are cloned in the subsequent sync step)
_process "Resetting index & working tree to fetched HEAD"
git reset --hard FETCH_HEAD

# Remove any untracked files
_process "Removing any untracked files"
git clean -fd

[[ $? ]] && _success "Repository has been initialized"

# Pull down the latest changes
_process "Pulling down latest changes"
git pull --rebase origin main

# Update submodules
_process "Updating submodules"
git submodule update --recursive --init --quiet

[[ $? ]] && _success "Repository has been updated"

if [[ -f "$HOME/.bash_profile.local" ]]; then
	cp "$DIR/conf/bash/profile.local" "$HOME/.bash_profile.local"
fi

# Install Homebrew formulae
if ! type -P 'brew' &> /dev/null; then
	_error "Homebrew not found"
	exit 1
else
	_process "Installing Homebrew packages"

	# Install Homebrew formulae
	brew bundle --file="$DIR/opt/"

	if [[ "$OSTYPE" == "linux-gnu"*  ]]; then
		brew install vim
	fi
	if [[ "$OSTYPE" =~ ^darwin ]]; then
		brew install vim --HEAD --with-override-system-vi
	fi

	brew cleanup

	[[ $? ]] && _success "Installed all Homebrew packages"
fi

# Install Node packages
if ! type -P 'npm' &> /dev/null; then
	_error "npm not found"
	exit 1
else
	# shellcheck source=/dev/null
	source "$DIR/lib/utils"
	# shellcheck source=/dev/null
	source "$DIR/lib/npm_packages"
	_process "Installing and updating npm packages"
	bulk_install _npm_package "$DIR/opt/npm"

	[[ $? ]] \
		&& _success "Node & NPM have been updated, all packages have been upgraded, and all new packages have been installed"
fi

# Install 1password
if ! [ -x "$(command -v op)" ]; then
	_process "Installing 1Password CLI"
	OP_VERSION="v1.8.0"
	curl -sS -o /tmp/1password.zip https://cache.agilebits.com/dist/1P/op/pkg/$OP_VERSION/op_linux_amd64_$OP_VERSION.zip
	unzip /tmp/1password.zip op -d "$(brew --prefix)/bin"
	rm -f /tmp/1password.zip

	# Automatically set 1Password session after logging in
	eval "$(op signin $OP_DOMAIN)" >> "$HOME/.bash_profile.local"
	[[ $? ]] && _success "Installed 1Password CLI"
fi

# Setup GPG
# https://help.github.com/articles/generating-a-new-gpg-key/
if ! type -P 'gpg' &> /dev/null; then
	_error "gpg not found"
	exit 1
else
	_process "Generating a GPG key"
	# generate a new GPG key
	# then if successful, list out the keys
	gpg --gen-key && gpg --list-secret-keys --keyid-format LONG

	_question "Which GPG key would you like to copy? (choose the code on the 'sec' line after the first slash)"
	read -r USER_GIT_GPG_KEY

	if [[ -n "$USER_GIT_GPG_KEY" ]]; then
		GIT_GPG_KEY="$USER_GIT_GPG_KEY"
		_process "Copying GPG key to pasteboard"
		git config --file "$HOME/.gitconfig.local" user.signingkey "$GIT_GPG_KEY"
		if [[ "$OSTYPE" =~ ^darwin ]]; then
			# only works on MacOS
			gpg --armor --export "$GIT_GPG_KEY" | pbcopy
			open "https://$GITHUB_URL/settings/keys"
		else
			gpg --armor --export "$GIT_GPG_KEY"
			_process "Open Github settings <https://$GITHUB_URL/settings/keys>; create a new GPG key and paste in the pasteboard"
		fi
	else
		_warning "No GPG key has been set.  Please update manually"
	fi
fi

# Copy `.gitconfig`.
# Any global git commands in `~/.bash_profile.local` will be written to
# `.gitconfig`. This prevents them being committed to the repository.
_process "Symlinking global git configuration file"
ln -fsn "$DIR/conf/git/config"  "$HOME/.gitconfig"
if [[ "$OSTYPE" == "linux-gnu"*  ]]; then
	_process "Symlinking global git configuration file"
	ln -fsn "$DIR/conf/git/config.linux"  "$HOME/.gitconfig.linux"
	git config --global include.path "$HOME/.gitconfig.linux"
fi
if [[ "$OSTYPE" =~ ^darwin ]]; then
	_process "Symlinking global git configuration file"
	ln -fsn "$DIR/conf/git/config.macos"  "$HOME/.gitconfig.macos"
	git config --global include.path "$HOME/.gitconfig.macos"
fi

# Force remove the git templates directory if it's already there.
_process "Removing $HOME/.templates/ directory"
if [ -e "$HOME/.templates" ]; then
	rm -rf "$HOME/.templates"
fi

# Symlink all necessary git templates
ln -fsn "$DIR/templates"  "$HOME/.templates"

# Setup ViM
# shellcheck source=/dev/null
if ! type -P 'vim' &> /dev/null; then
	source "$DIR/lib/vim"
	setup_vim
fi

# Create the necessary symbolic links between the `.dotfiles` and `HOME`
# directory. The `bash_profile` sources other files directly from the
# `.dotfiles` repository.
# shellcheck source=/dev/null
source "$DIR/lib/symlinks"
symlink_files "$DIR/opt/symlinks"

# Copy `.ssh/config`.
# This prevents them being committed to the repository.
_process "Syncing global ssh configuration file"
mkdir -p "$HOME/.ssh"
cp "$DIR/conf/ssh/config"  "$HOME/.ssh/config"

_process "Sourcing $HOME/.bash_profile"
# shellcheck source=/dev/null
source "$HOME/.bash_profile" 2&>/dev/null

# Setup git authorship
_process "Setting up Git author"
# Git author name
_question "What's your name"
read -r USER_GIT_AUTHOR_NAME
if [[ -n "$USER_GIT_AUTHOR_NAME" ]]; then
	GIT_AUTHOR_NAME="$USER_GIT_AUTHOR_NAME"
	git config --file "$HOME/.gitconfig.local" user.name "$GIT_AUTHOR_NAME"
else
	_warning "No Git user name has been set.  Please update manually"
fi

# Git author email
_question "What's your email"
read -r USER_GIT_AUTHOR_EMAIL
if [[ -n "$USER_GIT_AUTHOR_EMAIL" ]]; then
	GIT_AUTHOR_EMAIL="$USER_GIT_AUTHOR_EMAIL"
	git config --file "$HOME/.gitconfig.local" user.email "$GIT_AUTHOR_EMAIL"
else
	_warning "No Git user email has been set.  Please update manually"
fi

# Set the credentials (modifies $HOME/.gitconfig)
[[ $? ]] && _success "Git author is $(git config user.name) <$(git config user.email)>"

# Check for brew bash; change to it
_process "Changing login shell to Homebrew installed version"

# Mac OS X directory service command line utility
# sudo dscl . -change /Users/$USER UserShell /bin/bash /usr/local/bin/bash
if [[ "$OSTYPE" =~ ^darwin ]]; then
	echo "$(brew --prefix)/bin/bash" | pbcopy
	_process "Copied brew's /bin/bash to pasteboard"

	_process "Opening ViM to update /etc/shells with brew's /bin/bash"
	# `vim +` runs vim and puts you at the last line of the file
	# -c allows you to run commands and you can have up to 10
	# process reads => open /etc/shells in ViM, go to the last line, put
	# in Insert mode, paste in from the pasteboard, close and save all
	sudo vim + -c 'startinsert' -c ':r !pbpaste' -c ':xa' /etc/shells
fi

# Programmatic way to change shell
sudo chsh -s "$(brew --prefix)/bin/bash" 2>/dev/null

[[ $? ]] && _success "Changed default shell to Homebrew installed version"

# Symlink library files
_process "Symlinking ${GITHUB_REPO} command & man page"
ln -fsn "$DIR/bin/${GITHUB_REPO}"                "$(brew --prefix)/bin/${GITHUB_REPO}"
ln -fsn "$DIR/share/man/man1/${GITHUB_REPO}.1"   "$(brew --prefix)/share/man/man1/${GITHUB_REPO}.1"

[[ $? ]] && _success "Dotfiles installed.  To upgrade, run dotfiles"
