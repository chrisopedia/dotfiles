#!/usr/bin/env bash

# constants
readonly PROGNAME="$(basename "$0")"
# @TODO: need to figure out how to get the programmatic way of doing this
readonly PROGDIR="$HOME/.dotfiles"
readonly VERSION=$(cat "$PROGDIR/VERSION.md")
# readonly TODAY=$(date +"%m-%d-%y")
readonly ARGS="$@"

# utility functions
_is_empty() {
	local var=$1
	[[ -z $var ]]
}
_is_not_empty() {
	local var=$1
	[[ -n $var ]]
}
_exists() {
	local var=$1
	[[ -e $var ]]
}
is_file() {
	local file=$1
	[[ -f $file ]]
}
_is_dir() {
	local dir=$1
	[[ -d $dir ]]
}
_is_not_valid_option() {
	local option=$1
	printf "bash: %s: %s: invalid option\n" "$PROGNAME" "$option"
}
_print_error() {
	local message=$1
	printf "%s⊘ Error:%s %s. Aborting!\n\n" "$(tput setaf 1)" "$(tput sgr0)" "$message"
}
_print_success() {
	local message=$1
	printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}
_require_prog() {
	local prog=$1
	local msg=$2
	local url=$3
	type -P "$prog" >/dev/null || {
		print_error "$msg"
		echo "Download it at $url"
		exit 2
	}
}
_install_package() {
	local package=$1
	# Test whether a npm package is already installed
	if ! npm list -g "$package" | grep "$package" &> /dev/null; then
		npm install "$package" --global --quiet
	fi
}
_install_gem() {
	local gem=$1
	# Test whether a Ruby gem is already installed
	if ! gem list "$gem" | grep "$gem" &> /dev/null; then
		sudo gem install "$package"
	fi
}
_symlink_file() {
	local file=$1
	# split input on space, and return 2nd part (the symbolic link desired)
	local symbolic_link="$(echo "$file" | cut -d ' ' -f 2)"
	# Test whether a symbolic link already exists
	if [[ ! -L "$symbolic_link" ]]; then
		# set IFS back to space to split string on
		IFS=$' '
		# create symbolic link
		# create an array of line items
		symlink=("$file")
		ln -sfn "${PROGDIR}/${symlink[0]}" "${HOME}/${symlink[1]}"
	fi
}
_bulk_install() {
	local file=$PROGDIR/opt/$1
	local type=$2
	local apps
	local oifs=$IFS

	# set the separator to a carriage return & a new line break
	IFS=$'\r\n'
	# read in passed-in file and store as an array
	apps=($(cat "${file}"))

	for index in ${apps[*]}
	do
		case $type in
			homebrew)
				_install_formula "${apps[index]}"
				;;
			node)
				_install_package "${apps[index]}"
				;;
			ruby)
				_install_gem "${apps[index]}"
				;;
			*)
				_symlink_file "${apps[index]}"
				;;
		esac
	done

	IFS=$oifs
}
_usage() {
	printf "%s: usage: %s [-h|--help] [--prefix] [-v|--version]"  "$PROGNAME" "$PROGNAME"
}
_print_help() {
	cat <<- EOF

	usage: $PROGNAME [options]

	Update dotfiles with any new dependencies

	OPTIONS:
    -h --help              Show this help
    -t --test              Run unit test to check the program
    -v --version           Display dotfiles version
    --prefix               Display dotfiles install path. Default: $HOME/.dotfiles

	Examples:
    Run all tests:
    $PROGNAME --test

	Print current version:
    $PROGNAME --version

	Run:
    $PROGNAME

	EOF
}
_print_directory() {
	echo "$PROGDIR"
}
_edit() {
	cd "$PROGDIR" \
	&& vim
}
_run_tests() {
	_require_prog roundup "Roundup is required to run tests" https://github.com/bmizerany/roundup \
	&& roundup ./tests/*.sh
}
_version() {
	printf 'Version %s\n' "$VERSION"
}

# options
cmdline() {
	# got this idea from here:
	# http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/
	local arg=
	for arg
	do
		local delim=""
		case "$arg" in
			#translate --gnu-long-options to -g (short options)
			--edit)         args="${args}-e ";;
			--help)         args="${args}-h ";;
			--prefix)       args="${args}-p ";;
			--test)         args="${args}-t ";;
			--version)      args="${args}-v ";;
			#pass through anything else
			*) [[ "${arg:0:1}" == "-" ]] || delim="\""
				args="${args}${delim}${arg}${delim} ";;
		esac
	done

	#Reset the positional parameters to the short options
	eval set -- "$args"

	while getopts ":ehptv" OPTION
	do
		case $OPTION in
			e)
				_edit
				exit 0
				;;
			h)
				_print_help
				exit 0
				;;
			p)
				_print_directory
				exit 0
				;;
			t)
				_run_tests
				exit 0
				;;
			v)
				_version
				exit 0
				;;
			\?)
				_is_not_valid_option "-$OPTARG"
				usage
				exit 1
				;;
		esac
	done

	return 0
}

# program functions
_error_out() {
	_print_error "No $PROGDIR found!"
	printf 'Run the installer <%shttps://github.com/iamnewton/dotfiles#how-to-install%s>\n' "$(tput smul)" "$(tput rmul)"
	exit 1
}

install_formulae() {
	# Updating Homebrew
	brew update

	# Upgrade Homebrew formulaes
	brew upgrade

	# Install Homebrew formulae (macOS way only now?; 2020/11/05)
	brew bundle --file="${PROGDIR}/opt/"

	brew cleanup

	[[ $? ]] \
	&& _print_success "Homebrew updated, all formulae upgraded, new formulae installed"
}

upgrade_node() {
	sudo npm cache clean -f
	sudo npm install -g n
	sudo n stable

	[[ $? ]] \
	&& _print_success "Node updated"
}

install_packages() {
	npm update npm -g
	npm update -g

	npmfile="${PROGDIR}/opt/npm"

	# Install Node packages
	_bulk_install "$npmfile" 'node'

	[[ $? ]] \
	&& _print_success "npm updated, all packages upgraded, & new packages upgraded"
}

install_gems() {
	sudo gem update

	# Install Ruby gem
	gemfile="${PROGDIR}/opt/gems"

	_bulk_install "$gemfile" 'ruby'

	[[ $? ]] \
	&& _print_success "All Ruby gems upgraded, & new gems installed"
}

setup_vim() {
	# Force remove the vim directory if it's already there.
	exists "${HOME}/.vim" \
	&& rm -rf "${HOME}/.vim"

	ln -sfn "${PROGDIR}/vim"                "${HOME}/.vim"
	ln -sfn "${PROGDIR}/conf/runcom/vim"    "${HOME}/.vimrc"

	[[ $? ]] \
	&& _print_success "Updated ViM settings"
}

update_vim_plugins() {
	vim "${HOME}/.vim/settings/bundles.vim" +PluginInstall +PluginUpdate +qall
	[[ $? ]] \
	&& _print_success "Updated ViM bundles"
}

setup_global_gitconfig() {
	# Copy `.gitconfig`.
	# Any global git commands in `~/.bash_profile.local` will be written to
	# .gitconfig. This prevents them being committed to the repository.
	rsync -avz --quiet "${PROGDIR}/conf/git/config"  "${HOME}/.gitconfig"
}

symlink_config_files() {
	# Set variable for list of symlinks
	symlinks="${PROGDIR}/opt/symlinks"

	_bulk_install "$symlinks"

	[[ $? ]] \
	&& _print_success "All files have been symlinked"
}

source_bash() {
	source "${HOME}/.bash_profile"
}

main() {
	_is_empty "$PROGDIR" \
	&& error_out

	cmdline "$ARGS"

	_require_prog git "Git is required to use $PROGNAME" http://git-scm.com

	_require_prog brew "Homebrew is required to install formulae" http://brew.sh \
	&& install_formulae

	_require_prog node "Node is required to use npm" http://nodejs.org \
	&& upgrade_node

	_require_prog npm "npm is required to install packages" https://www.npmjs.org \
	&& install_packages

	setup_vim

	setup_global_gitconfig

	_is_file "$HOME/.vim/settings/bundles.vim" \
	&& update_vim_plugins

	_is_file "$PROGDIR/opt/symlinks" \
	&& symlink_config_files

	source_bash \
	&& _print_success "$PROGNAME updated"
}

main
