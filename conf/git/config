[alias]
	# https://git.wiki.kernel.org/articles/a/l/i/Aliases.html

	# `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
	# `git gc`: cleanup unnecessary files and optimize the local repository
	# `git clean -df`: remove untracked files and directories from the working tree
	# `git stash clear`: remove all stashed states
	trim = !git remote prune origin && git gc
	cleanup = !git clean -df && git stash clear
	undo = !git reset --soft HEAD^

	# Show the diff of everything you haven't pushed yet
	unpushed = !git diff origin/$(git rev-parse --abbrev-ref HEAD)..HEAD'

	# Add untracked, remove deleted, and show status
	adda = !git add -A && git status

	# Sets git branch default to list verbosely
	branch = !git branch --list -v

	# Sets git remote default to list verbosely
	remote = !git remote -v

	# Fetch a repository ($1) and checkout its ref ($2) HEAD
	# Use: `git browse https://github.com/necolas/dotfiles <commit-ish>`
	browse = !bash -c 'git fetch $1 ${2:-HEAD} && git checkout FETCH_HEAD' -

	# Diff what is staged for the next commit
	diffc = diff --cached
	# Diff overview
	diffst = diff --stat

	# Custom graph log (append any tree-ish)
	graph = log --pretty=nice --date-order --graph
	# Custom graph log for all branches
	grapha = log --pretty=nice --date-order --graph --all

	# Custom pretty log
	logp = log --pretty=nice --date-order

	# Diffstat log
	logst = log --stat
	# Short format diffstat log
	logsf = log --stat --format=oneline --abbrev-commit

	# Fetch and checkout a GitHub Pull Request from a remote (defaults to `origin`)
	# Use: `git gh-pr 123` or `git gh-pr 123 upstream`
	gh-pr = !bash -c 'git fetch -fu ${2:-origin} refs/pull/$1/head:gh-pr/$1 && git checkout gh-pr/$1' -

	# Find out who is currently active on the repository
	# Displays committers in descending order of number of commits
	who = shortlog --numbered --summary --email --no-merges --since="3 months"

[apply]
	whitespace = nowarn

[branch]
	autosetupmerge = true
	# configure git to always add '--rebase' to git pull, to maintain nicer history
	# read more at http://gitready.com/advanced/2009/02/11/pull-with-rebase.html
	# you can override this with '--no-rebase' switch
	autosetuprebase = always

[color]
	# color opts: normal, black, red, green, yellow, blue, magenta, cyan, or white
	ui = auto
	interactive = auto
	showbranch = auto

[color "branch"]
	current = magenta ul bold reverse
	local = magenta dim
	remote = blue
	upstream = blue dim
	plain = white

[color "diff"]
	meta = yellow bold
	frag = cyan bold
	old = red bold
	new = green bold
	whitespace = yellow reverse
	commit = green ul bold

[color "status"]
	added = green
	changed = yellow
	untracked = red
	branch = magenta
	nobranch = red bold

[commit]
	# custom commit message template
	template = ~/.gitmessage

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	autocrlf = input
	# use vim as editor
	editor = vim
	pager = less -+$LESS -FRX
	# dont irreversably perform CRLF conversion on a binary file
	safecrlf = true

[credential]
	# https://help.github.com/articles/set-up-git
	# password caching using the osx keychain
	helper = osxkeychain

[diff]
	tool = vimdiff

[diff "exif"]
	textconv = exiftool

[difftool]
	prompt = false

[difftool "Kaleidoscope"]
	cmd = ksdiff-wrapper git \"$LOCAL\" \"$REMOTE\"

[help]
	# suggests commands for spelling mistakes
	autocorrect = 1

[merge]
	# Include summaries of merged conflicts in newly created merge commit messages
	log = true
	tool = vimdiff

[pretty]
	# tut: http://gitimmersion.com/lab_10.html
	# ref: http://linux.die.net/man/1/git-log
	# Result: <short-sha> <commit-message> (<pointer-names>) -- <commit-author-name>; <relative-time>
	# http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History
	# %b:+--body
	# %Cred:switch color to red
	# %Cgreen: switch color to green
	# %Cblue: switch color to blue
	# %Creset: reset color
	# %C(...): color specification, as described in color.branch.* config option
	# %d+---ref names, like the --decorate option of git-log(1)
	# %H+---Commit hash
	# %h+---Abbreviated commit hash
	# %f:+--sanitized subject line, suitable for a filename
	# %m:+--left, right or boundary mark
	# %N:+--commit notes
	# %n:+--newline
	# %P+---Parent hashes
	# %p+---Abbreviated parent hashes
	# %s+---Subject
	# %T+---Tree hash
	# %t+---Abbreviated tree hash
	# %w([<w>[,<i1>[,<i2>]]]): switch line wrapping, like the -w option of git-shortlog(1).
	# %an+--Author name
	# %ae+--Author e-mail
	# %ad+--Author date (format respects the --date= option)
	# %ar+--Author date, relative
	# %cn+--Committer name
	# %ce+--Committer email
	# %cd+--Committer date
	# %cr+--Committer date, relative
	# %%+---:a raw %
	# %x00:+print a byte from a hex code
	nice = "%C(209)%an%C(reset)@%C(yellow)%h%C(reset) said '%C(white bold)%s%C(reset)' about %C(cyan)%ar%C(reset)%C(magenta)%d%C(reset)"

[push]
	default = matching

# http://git-scm.com/blog/2010/03/08/rerere.html
# reuse the recorded resolutions
[rerere]
	enabled = 1

[status]
	# always show the full path
	relativePaths = false
